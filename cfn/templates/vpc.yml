AWSTemplateFormatVersion: 2010-09-09

Description: Create network resources.

Parameters:
  CreateNatGateways:
    Type: String
    Default: true
    AllowedValues:
      - true
      - false

Conditions:
  CreateNatGateways: !Equals [true, !Ref CreateNatGateways]

Resources:
  #-----------------------------------------------------------------------------
  # VPCs, IGWs
  #-----------------------------------------------------------------------------
  VPC01:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: VPC01
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W60
            reason: Pending

  IGW01:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: IGW01

  VPCGWA01:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC01
      InternetGatewayId: !Ref IGW01

  #-----------------------------------------------------------------------------
  # NatGateways, EIPs
  #-----------------------------------------------------------------------------
  NatGateway01:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway01EIP.AllocationId
      SubnetId: !Ref PublicSubnet01
      Tags:
        - Key: Name
          Value: NatGateway01
    Condition: CreateNatGateways

  NatGateway01EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    Condition: CreateNatGateways

  NatGateway02:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway02EIP.AllocationId
      SubnetId: !Ref PublicSubnet02
      Tags:
        - Key: Name
          Value: NatGateway02
    Condition: CreateNatGateways

  NatGateway02EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    Condition: CreateNatGateways

  #-----------------------------------------------------------------------------
  # Subnets
  #-----------------------------------------------------------------------------
  PublicSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref AWS::Region
      VpcId: !Ref VPC01
      Tags:
        - Key: Name
          Value: PublicSubnet01

  PublicSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref AWS::Region
      VpcId: !Ref VPC01
      Tags:
        - Key: Name
          Value: PublicSubnet02

  PrivateSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref AWS::Region
      VpcId: !Ref VPC01
      Tags:
        - Key: Name
          Value: PrivateSubnet01

  PrivateSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref AWS::Region
      VpcId: !Ref VPC01
      Tags:
        - Key: Name
          Value: PrivateSubnet02

  #-----------------------------------------------------------------------------
  # Routetables
  #-----------------------------------------------------------------------------
  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC01
      Tags:
        - Key: Name
          Value: PublicSubnetRouteTable

  PublicSubnetRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW01

  PublicSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet01
      RouteTableId: !Ref PublicSubnetRouteTable

  PublicSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet02
      RouteTableId: !Ref PublicSubnetRouteTable

  PrivateSubnet01RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC01
      Tags:
        - Key: Name
          Value: PrivateSubnet01RouteTable

  PrivateSubnet01Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnet01RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway01
    Condition: CreateNatGateways

  PrivateSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet01
      RouteTableId: !Ref PrivateSubnet01RouteTable

  PrivateSubnet02RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC01
      Tags:
        - Key: Name
          Value: PrivateSubnet02RouteTable

  PrivateSubnet02Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnet02RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway02
    Condition: CreateNatGateways

  PrivateSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet02
      RouteTableId: !Ref PrivateSubnet02RouteTable

  #-----------------------------------------------------------------------------
  # Security groups
  #-----------------------------------------------------------------------------
  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: ELBSecurityGroup
      GroupDescription: Security group to allow http, https to client host
      VpcId: !Ref VPC01
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: For HTTP
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: For HTTPS
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F1000
            reason: No restrictions are imposed on egress rules.
          - id: W2
            reason: This security group is not assigned to EC2; it is assigned to ELB for use.
          - id: W9
            reason: This security group is not assigned to EC2; it is assigned to ELB for use.
          - id: W28
            reason: Pending
