---
AWSTemplateFormatVersion: 2010-09-09

Description: Create IAM users.

Parameters:
  DefaultIPAddress:
    Type: String
    Default: 0.0.0.0/32
    NoEcho: true

  Admin01UserName:
    Type: String
    NoEcho: true

  WebAdmin01UserName:
    Type: String
    NoEcho: true

  CreateAdmin01User:
    Type: String
    Default: false
    AllowedValues:
      - true
      - false

  CreateWebAdmin01User:
    Type: String
    Default: false
    AllowedValues:
      - true
      - false

Conditions:
  CreateAdmin01User: !Equals [true, !Ref CreateAdmin01User]
  CreateWebAdmin01User: !Equals [true, !Ref CreateWebAdmin01User]

Resources:
  # ----------------------------------------------------------------------------
  # Policies
  # ----------------------------------------------------------------------------
  SetOwnCredentialsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: SetOwnCredentialsPolicy
      Description: Policy to set own credentials(password, MFA, etc).
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - iam:ChangePassword
              - iam:CreateAccessKey
              - iam:CreateVirtualMFADevice
              - iam:DeleteAccessKey
              - iam:DeleteVirtualMFADevice
              - iam:EnableMFADevice
              - iam:GetAccountPasswordPolicy
              - iam:UpdateAccessKey
              - iam:UpdateSigningCertificate
              - iam:UploadSigningCertificate
              - iam:UpdateLoginProfile
              - iam:ResyncMFADevice
              - iam:Get*
              - iam:List*
            Resource:
              - !Sub arn:aws:iam::${AWS::AccountId}:user/${!aws:username}
              - !Sub arn:aws:iam::${AWS::AccountId}:mfa/${!aws:username}
          - Effect: Allow
            Action:
              - iam:DeactivateMFADevice
            Resource:
              - !Sub arn:aws:iam::${AWS::AccountId}:user/${!aws:username}
              - !Sub arn:aws:iam::${AWS::AccountId}:mfa/${!aws:username}
            Condition:
              Bool:
                aws:MultiFactorAuthPresent: true
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W13
            reason: Pending
          - id: W28
            reason: Pending

  ForceMFAPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: ForceMFAPolicy
      Description: Policy to deny all actions without IAM if MFA is not activated.
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Deny
            NotAction: iam:*
            Resource: "*"
            Condition:
              BoolIfExists:
                aws:MultiFactorAuthPresent: false
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: Pending

  IPRestrictionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: IPRestrictionPolicy
      Description: Policy to deny all actions from non specified IP address.
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Deny
            Action: "*"
            Resource: "*"
            Condition:
              NotIpAddress:
                aws:SourceIp: !Ref DefaultIPAddress
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: Pending

  # -----------------------------------------------------------------------------
  # Groups
  # -----------------------------------------------------------------------------
  # For All users.
  AllGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: AllGroup
      ManagedPolicyArns:
        - !Ref ForceMFAPolicy
        - !Ref SetOwnCredentialsPolicy
        - !Ref IPRestrictionPolicy
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: Pending

  # For Administrator users.
  AdminGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: AdminGroup
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/ReadOnlyAccess
      Policies:
        - PolicyName: AssumeRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: sts:AssumeRole
                Resource: !GetAtt AdminRole.Arn
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: Pending

  # For Web administrator users.
  WebAdminGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: WebAdminGroup
      Policies:
        - PolicyName: AssumeRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: sts:AssumeRole
                Resource: !GetAtt WebAdminRole.Arn
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: Pending

  # -----------------------------------------------------------------------------
  # Roles
  # -----------------------------------------------------------------------------
  # For Administrator users.
  AdminRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AdminRole
      Description: Role for Administrator users
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:root
            Condition:
              Bool:
                aws:MultiFactorAuthPresent: true
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
      MaxSessionDuration: 43200
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: Pending
          - id: W43
            reason: This role can be only used by specified user with MFA is activated

  # For Web administrator users.
  WebAdminRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: WebAdminRole
      Description: Role for Web administrator users
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:root
            Condition:
              Bool:
                aws:MultiFactorAuthPresent: true
      Policies:
        - PolicyName: SSMLoginPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ssm:StartSession
                Resource:
                  - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*
                Condition:
                  StringLike:
                    ssm:resourceTag/Name:
                      - Web01
                      - Web02
              - Effect: Allow
                Action:
                  - ssm:TerminateSession
                  - ssm:ResumeSession
                Resource:
                  - arn:aws:ssm:*:*:session/${aws:username}-*
      MaxSessionDuration: 43200
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: Pending

  # -----------------------------------------------------------------------------
  # Users
  # -----------------------------------------------------------------------------
  # Administrator users.
  Admin01:
    Type: AWS::IAM::User
    Properties:
      UserName: !Ref Admin01UserName
      LoginProfile:
        Password: !Sub "{{resolve:secretsmanager:${Admin01Password}:SecretString:password::}}"
        PasswordResetRequired: true
      Groups:
        - !Ref AllGroup
        - !Ref AdminGroup
    Condition: CreateAdmin01User

  Admin01Password:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: admin01-passowrd
      KmsKeyId: !ImportValue CommonKeyArn
      GenerateSecretString:
        GenerateStringKey: password
        PasswordLength: 32
        SecretStringTemplate: "{}"
    Condition: CreateAdmin01User

  # Web administrator users.
  WebAdmin01:
    Type: AWS::IAM::User
    Properties:
      UserName: !Ref WebAdmin01UserName
      Groups:
        - !Ref AllGroup
        - !Ref WebAdminGroup
    Condition: CreateWebAdmin01User

  # -----------------------------------------------------------------------------
  # Access keys, Access key secrets
  # -----------------------------------------------------------------------------
  # Admin01 user.
  Admin01AccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref Admin01
    Condition: CreateAdmin01User

  Admin01AccessKeySecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: admin01-credentials
      KmsKeyId: !ImportValue CommonKeyArn
      SecretString: !Sub '{"accessKeyId":"${Admin01AccessKey}","secretAccessKey":"${Admin01AccessKey.SecretAccessKey}"}'
    Condition: CreateAdmin01User

  # WebAdmin01 user.
  WebAdmin01AccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref WebAdmin01
    Condition: CreateWebAdmin01User

  WebAdmin01AccessKeySecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: webadmin01-credentials
      KmsKeyId: !ImportValue CommonKeyArn
      SecretString: !Sub '{"accessKeyId":"${WebAdmin01AccessKey}","secretAccessKey":"${WebAdmin01AccessKey.SecretAccessKey}"}'
    Condition: CreateWebAdmin01User
